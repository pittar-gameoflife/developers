apiVersion: 1.0.0
metadata:
 generateName: gameoflife-
projects:
  - name: decisions
    source:
      location: 'https://github.com/pittar-gameoflife/decisions.git'
      type: 'git'
  - name: supervisor
    source:
      location: 'https://github.com/pittar-gameoflife/supervisor.git'
      type: 'git'
  - name: web-ui
    source:
      location: 'https://github.com/pittar-gameoflife/web-ui.git'
      type: 'git'
  - name: manifests
    source:
      location: 'https://github.com/pittar-gameoflife/gitops.git'
      type: 'git'
components:
 -
  type: chePlugin
  id: redhat/quarkus-java11/latest
 -
  type: dockerimage
  alias: maven
  image: >-
   registry.redhat.io/codeready-workspaces/plugin-java11-rhel8:latest
  env:
   -
    name: JAVA_OPTS
    value: >-
     -XX:MaxRAMPercentage=50.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10
     -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90
     -Dsun.zip.disableMemoryMapping=true -Xms512m
     -Djava.security.egd=file:/dev/./urandom -Duser.home=/home/jboss
   -
    name: MAVEN_OPTS
    value: $(JAVA_OPTS)
  memoryLimit: 3G
  mountSources: true
  volumes:
   -
    name: m2
    containerPath: /home/jboss/.m2
  endpoints:
   -
    name: web-ui
    port: 8080
    attributes:
      path: /grid.html
      discoverable: "false"
      public: "true"
      protocol: http
   -
    name: decisions
    port: 8081
    attributes:
      discoverable: "true"
      public: "false"
      protocol: http
   -
    name: supervisor
    port: 8082
    attributes:
      discoverable: "true"
      public: "false"
      protocol: http
 - 
  type: kubernetes
  reference: codeready/crw-kafka.yaml
commands:
 - name: 0. Log into OpenShift
   actions:
    - 
      workdir: '${CHE_PROJECTS_ROOT}'
      type: exec
      command: oc login ${KUBERNETES_SERVICE_HOST}
      component: maven
 -
  name: 1. UI - Package application
  actions:
   -
    type: exec
    component: maven
    command: mvn package
    workdir: '${CHE_PROJECTS_ROOT}/web-ui'
 -
  name: 1. Decisions - Package application
  actions:
   -
    type: exec
    component: maven
    command: mvn package
    workdir: '${CHE_PROJECTS_ROOT}/decisions'
 -
  name: 1. Supervisor - Package application
  actions:
   -
    type: exec
    component: maven
    command: mvn package
    workdir: '${CHE_PROJECTS_ROOT}/supervisor'
 -
  name: 2. UI - Start Quarkus in devmode (hot deploy + debug)
  actions:
   -
    type: exec
    component: maven
    command: 'mvn compile quarkus:dev -Ddev.kafka.bootstrap.servers=kafka:9092 -Ddebug=5006'
    workdir: '${CHE_PROJECTS_ROOT}/web-ui'
 -
  name: 2. Decisions - Start Quarkus in devmode (hot deploy + debug)
  actions:
   -
    type: exec
    component: maven
    command: 'mvn compile quarkus:dev -Ddev.kafka.bootstrap.servers=kafka:9092 -Ddebug=5007'
    workdir: '${CHE_PROJECTS_ROOT}/decisions'
 -
  name: 2. Supervisor - Start Quarkus in devmode (hot deploy + debug)
  actions:
   -
    type: exec
    component: maven
    command: 'mvn compile quarkus:dev -Ddev.kafka.bootstrap.servers=kafka:9092 -Ddebug=5008'
    workdir: '${CHE_PROJECTS_ROOT}/supervisor'
 -
  name: 3. UI - Attach remote debugger
  actions:
   -
    type: vscode-launch
    referenceContent: |
     {
       "version": "0.2.0",
       "configurations": [
         {
           "type": "java",
           "request": "attach",
           "name": "Attach to Remote Quarkus App",
           "hostName": "localhost",
           "port": 5006
         }
       ]
     }
 -
  name: 3. Decisions - Attach remote debugger
  actions:
   -
    type: vscode-launch
    referenceContent: |
     {
       "version": "0.2.0",
       "configurations": [
         {
           "type": "java",
           "request": "attach",
           "name": "Attach to Remote Quarkus App",
           "hostName": "localhost",
           "port": 5007
         }
       ]
     }
 -
  name: 3. Supervisor - Attach remote debugger
  actions:
   -
    type: vscode-launch
    referenceContent: |
     {
       "version": "0.2.0",
       "configurations": [
         {
           "type": "java",
           "request": "attach",
           "name": "Attach to Remote Quarkus App",
           "hostName": "localhost",
           "port": 5008
         }
       ]
     }
 - name: 4. Start UI Build
   actions:
    - 
      workdir: '${CHE_PROJECTS_ROOT}'
      type: exec
      command: oc start-build gameoflife-ui -n gameoflife --follow
      component: maven
  - name: 5. Share this workspace
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}'
        type: exec
        command: |
          read -p "ENTER your OpenShift username: " OCP_USERNAME
          read -p "ENTER your OpenShift password: " -s OCP_PASSWORD
          echo
          # Login to OpenShift with the provided credentials, and grab the token
          oc login --insecure-skip-tls-verify=true -u $OCP_USERNAME -p $OCP_PASSWORD $KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT
          OCP_TOKEN=$(oc whoami -t)
          echo
          # Read username
          read -p "ENTER the username of the person with whom you want to share this workspace: " OTHER_CRW_USER
          echo
          KEYCLOAK_URL=http://keycloak.openshift-workspaces.svc:8080
          # Download jq to tmp folder
          curl -L -s https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /tmp/jq
          chmod +x /tmp/jq
          # Swap OCP Token for CRW Token
          CRW_TOKEN=$(curl -X POST -s -d "client_id=codeready-public" --data-urlencode "grant_type=urn:ietf:params:oauth:grant-type:token-exchange" -d "subject_token=${OCP_TOKEN}" -d "subject_issuer=openshift-v4" --data-urlencode "subject_token_type=urn:ietf:params:oauth:token-type:access_token" ${KEYCLOAK_URL}/auth/realms/codeready/protocol/openid-connect/token | /tmp/jq -r .access_token)
          # Get target user's GUID from their username
          CHE_USER_ID=$(curl -s -H "Authorization: Bearer ${CRW_TOKEN}" "${CHE_API}/user/find?name=${OTHER_CRW_USER}" | /tmp/jq -r .id)
          # Remove jq
          rm -f /tmp/jq
          # Grant read, use, and run permissions for this workspace for the indicated user
          curl -X POST --header 'Content-Type: application/json' -H "Authorization: Bearer ${CRW_TOKEN}" -H 'Accept: text/html' -d '{
            "actions": [
              "read",
              "use",
              "run"
            ],
            "userId": "'$CHE_USER_ID'",
            "domainId": "workspace",
            "instanceId": "'$CHE_WORKSPACE_ID'"
          }' "${CHE_API}/permissions" && \
          echo "âœ… Successfully shared workspace with user $OTHER_CRW_USER"
        component: maven
